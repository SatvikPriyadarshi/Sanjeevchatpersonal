{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sanjeevchatpersonal\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { getWebSocketUrl, getSocketConfig } from \"../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error(\"useSocket must be used within a SocketProvider\");\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [user, setUser] = useState(() => {\n    // Try to restore user from localStorage\n    const savedUser = localStorage.getItem(\"chatapp-user\");\n    return savedUser ? JSON.parse(savedUser) : null;\n  });\n  useEffect(() => {\n    // Initialize socket connection using centralized config\n    const websocketUrl = getWebSocketUrl();\n    const socketConfig = getSocketConfig();\n    console.log(\"🔌 SocketContext: Connecting to WebSocket URL:\", websocketUrl);\n    console.log(\"⚙️ SocketContext: Socket config:\", socketConfig);\n    const newSocket = io(websocketUrl, socketConfig);\n\n    // Connection events\n    newSocket.on(\"connect\", () => {\n      console.log(\"✅ SocketContext: Successfully connected to server at:\", websocketUrl);\n      console.log(\"🔗 SocketContext: Socket ID:\", newSocket.id);\n      setIsConnected(true);\n    });\n    newSocket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n      setIsConnected(false);\n    });\n    newSocket.on(\"connect_error\", error => {\n      console.error(\"Connection error:\", error);\n      setIsConnected(false);\n    });\n\n    // User events\n    newSocket.on(\"user-joined\", userData => {\n      console.log(\"User joined:\", userData);\n      setUser(userData);\n      localStorage.setItem(\"chatapp-user\", JSON.stringify(userData));\n    });\n    newSocket.on(\"error\", error => {\n      console.error(\"Socket error:\", error);\n    });\n    newSocket.on(\"join-room-error\", error => {\n      console.error(\"Join room error:\", error);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Connect to server\n  const connect = () => {\n    if (socket && !isConnected) {\n      socket.connect();\n    }\n  };\n\n  // Disconnect from server\n  const disconnect = () => {\n    if (socket && isConnected) {\n      socket.disconnect();\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"chatapp-user\");\n    if (socket && isConnected) {\n      socket.disconnect();\n    }\n  };\n\n  // Join user with username\n  const joinUser = (username, avatar) => {\n    return new Promise((resolve, reject) => {\n      if (socket && isConnected) {\n        socket.emit(\"join-user\", {\n          username,\n          avatar\n        });\n        const timeout = setTimeout(() => {\n          socket.off(\"user-joined\");\n          socket.off(\"join-user-error\");\n          reject(new Error(\"Timeout joining user\"));\n        }, 5000);\n        socket.once(\"user-joined\", userData => {\n          clearTimeout(timeout);\n          setUser(userData);\n          localStorage.setItem(\"chatapp-user\", JSON.stringify(userData));\n          resolve(userData);\n        });\n        socket.once(\"join-user-error\", error => {\n          clearTimeout(timeout);\n          reject(new Error(error.message || \"Failed to join\"));\n        });\n      } else {\n        reject(new Error(\"Socket not connected\"));\n      }\n    });\n  };\n\n  // Join a room\n  const joinRoom = roomId => {\n    return new Promise((resolve, reject) => {\n      if (socket && isConnected) {\n        socket.emit(\"join-room\", {\n          roomId\n        });\n        const timeout = setTimeout(() => {\n          socket.off(\"room-joined\");\n          socket.off(\"join-room-error\");\n          reject(new Error(\"Timeout joining room\"));\n        }, 5000);\n        socket.once(\"room-joined\", roomData => {\n          clearTimeout(timeout);\n          console.log(\"🏠 Frontend: Room joined successfully:\", roomData);\n          resolve(roomData);\n        });\n        socket.once(\"join-room-error\", error => {\n          clearTimeout(timeout);\n          reject(new Error(error.message || \"Failed to join room\"));\n        });\n      } else {\n        reject(new Error(\"Socket not connected\"));\n      }\n    });\n  };\n\n  // Leave room\n  const leaveRoom = () => {\n    if (socket && isConnected) {\n      socket.emit(\"leave-room\");\n    }\n  };\n\n  // Send chat message\n  const sendMessage = content => {\n    if (socket && isConnected) {\n      console.log(\"📨 Frontend: Sending message:\", content);\n      socket.emit(\"chat-message\", {\n        content\n      });\n    } else {\n      console.log(\"❌ Frontend: Cannot send message - socket connected:\", isConnected);\n    }\n  };\n\n  // Start typing indicator\n  const startTyping = () => {\n    if (socket && isConnected) {\n      console.log(\"⌨️ Frontend: Starting typing indicator\");\n      socket.emit(\"typing-start\");\n    } else {\n      console.log(\"❌ Frontend: Cannot start typing - socket connected:\", isConnected);\n    }\n  };\n\n  // Stop typing indicator\n  const stopTyping = () => {\n    if (socket && isConnected) {\n      console.log(\"⌨️ Frontend: Stopping typing indicator\");\n      socket.emit(\"typing-stop\");\n    } else {\n      console.log(\"❌ Frontend: Cannot stop typing - socket connected:\", isConnected);\n    }\n  };\n\n  // Get room status\n  const getRoomStatus = () => {\n    return new Promise((resolve, reject) => {\n      if (socket && isConnected) {\n        socket.emit(\"get-room-status\");\n\n        // Listen for the response\n        const timeout = setTimeout(() => {\n          socket.off(\"room-status-response\");\n          reject(new Error(\"Timeout waiting for room status\"));\n        }, 5000);\n        socket.once(\"room-status-response\", rooms => {\n          clearTimeout(timeout);\n          resolve(rooms || []);\n        });\n      } else {\n        reject(new Error(\"Socket not connected\"));\n      }\n    });\n  };\n  const value = {\n    socket,\n    isConnected,\n    user,\n    connect,\n    disconnect,\n    logout,\n    joinUser,\n    joinRoom,\n    leaveRoom,\n    sendMessage,\n    startTyping,\n    stopTyping,\n    getRoomStatus\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"+8ZojKT0eTS0g1Qd2dGTgBJZsXk=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","getWebSocketUrl","getSocketConfig","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","user","setUser","savedUser","localStorage","getItem","JSON","parse","websocketUrl","socketConfig","console","log","newSocket","on","id","error","userData","setItem","stringify","close","connect","disconnect","logout","removeItem","joinUser","username","avatar","Promise","resolve","reject","emit","timeout","setTimeout","off","once","clearTimeout","message","joinRoom","roomId","roomData","leaveRoom","sendMessage","content","startTyping","stopTyping","getRoomStatus","rooms","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Sanjeevchatpersonal/frontend/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport { getWebSocketUrl, getSocketConfig } from \"../config\";\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error(\"useSocket must be used within a SocketProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [user, setUser] = useState(() => {\r\n    // Try to restore user from localStorage\r\n    const savedUser = localStorage.getItem(\"chatapp-user\");\r\n    return savedUser ? JSON.parse(savedUser) : null;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Initialize socket connection using centralized config\r\n    const websocketUrl = getWebSocketUrl();\r\n    const socketConfig = getSocketConfig();\r\n    \r\n    console.log(\"🔌 SocketContext: Connecting to WebSocket URL:\", websocketUrl);\r\n    console.log(\"⚙️ SocketContext: Socket config:\", socketConfig);\r\n    \r\n    const newSocket = io(websocketUrl, socketConfig);\r\n\r\n    // Connection events\r\n    newSocket.on(\"connect\", () => {\r\n      console.log(\"✅ SocketContext: Successfully connected to server at:\", websocketUrl);\r\n      console.log(\"🔗 SocketContext: Socket ID:\", newSocket.id);\r\n      setIsConnected(true);\r\n    });\r\n\r\n    newSocket.on(\"disconnect\", () => {\r\n      console.log(\"Disconnected from server\");\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on(\"connect_error\", (error) => {\r\n      console.error(\"Connection error:\", error);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    // User events\r\n    newSocket.on(\"user-joined\", (userData) => {\r\n      console.log(\"User joined:\", userData);\r\n      setUser(userData);\r\n      localStorage.setItem(\"chatapp-user\", JSON.stringify(userData));\r\n    });\r\n\r\n    newSocket.on(\"error\", (error) => {\r\n      console.error(\"Socket error:\", error);\r\n    });\r\n\r\n    newSocket.on(\"join-room-error\", (error) => {\r\n      console.error(\"Join room error:\", error);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Connect to server\r\n  const connect = () => {\r\n    if (socket && !isConnected) {\r\n      socket.connect();\r\n    }\r\n  };\r\n\r\n  // Disconnect from server\r\n  const disconnect = () => {\r\n    if (socket && isConnected) {\r\n      socket.disconnect();\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"chatapp-user\");\r\n    if (socket && isConnected) {\r\n      socket.disconnect();\r\n    }\r\n  };\r\n\r\n  // Join user with username\r\n  const joinUser = (username, avatar) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (socket && isConnected) {\r\n        socket.emit(\"join-user\", { username, avatar });\r\n\r\n        const timeout = setTimeout(() => {\r\n          socket.off(\"user-joined\");\r\n          socket.off(\"join-user-error\");\r\n          reject(new Error(\"Timeout joining user\"));\r\n        }, 5000);\r\n\r\n        socket.once(\"user-joined\", (userData) => {\r\n          clearTimeout(timeout);\r\n          setUser(userData);\r\n          localStorage.setItem(\"chatapp-user\", JSON.stringify(userData));\r\n          resolve(userData);\r\n        });\r\n\r\n        socket.once(\"join-user-error\", (error) => {\r\n          clearTimeout(timeout);\r\n          reject(new Error(error.message || \"Failed to join\"));\r\n        });\r\n      } else {\r\n        reject(new Error(\"Socket not connected\"));\r\n      }\r\n    });\r\n  };\r\n\r\n  // Join a room\r\n  const joinRoom = (roomId) => {\r\n    return new Promise((resolve, reject) => {\r\n      if (socket && isConnected) {\r\n        socket.emit(\"join-room\", { roomId });\r\n\r\n        const timeout = setTimeout(() => {\r\n          socket.off(\"room-joined\");\r\n          socket.off(\"join-room-error\");\r\n          reject(new Error(\"Timeout joining room\"));\r\n        }, 5000);\r\n\r\n        socket.once(\"room-joined\", (roomData) => {\r\n          clearTimeout(timeout);\r\n          console.log(\"🏠 Frontend: Room joined successfully:\", roomData);\r\n          resolve(roomData);\r\n        });\r\n\r\n        socket.once(\"join-room-error\", (error) => {\r\n          clearTimeout(timeout);\r\n          reject(new Error(error.message || \"Failed to join room\"));\r\n        });\r\n      } else {\r\n        reject(new Error(\"Socket not connected\"));\r\n      }\r\n    });\r\n  };\r\n\r\n  // Leave room\r\n  const leaveRoom = () => {\r\n    if (socket && isConnected) {\r\n      socket.emit(\"leave-room\");\r\n    }\r\n  };\r\n\r\n  // Send chat message\r\n  const sendMessage = (content) => {\r\n    if (socket && isConnected) {\r\n      console.log(\"📨 Frontend: Sending message:\", content);\r\n      socket.emit(\"chat-message\", { content });\r\n    } else {\r\n      console.log(\r\n        \"❌ Frontend: Cannot send message - socket connected:\",\r\n        isConnected\r\n      );\r\n    }\r\n  };\r\n\r\n  // Start typing indicator\r\n  const startTyping = () => {\r\n    if (socket && isConnected) {\r\n      console.log(\"⌨️ Frontend: Starting typing indicator\");\r\n      socket.emit(\"typing-start\");\r\n    } else {\r\n      console.log(\r\n        \"❌ Frontend: Cannot start typing - socket connected:\",\r\n        isConnected\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop typing indicator\r\n  const stopTyping = () => {\r\n    if (socket && isConnected) {\r\n      console.log(\"⌨️ Frontend: Stopping typing indicator\");\r\n      socket.emit(\"typing-stop\");\r\n    } else {\r\n      console.log(\r\n        \"❌ Frontend: Cannot stop typing - socket connected:\",\r\n        isConnected\r\n      );\r\n    }\r\n  };\r\n\r\n  // Get room status\r\n  const getRoomStatus = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (socket && isConnected) {\r\n        socket.emit(\"get-room-status\");\r\n\r\n        // Listen for the response\r\n        const timeout = setTimeout(() => {\r\n          socket.off(\"room-status-response\");\r\n          reject(new Error(\"Timeout waiting for room status\"));\r\n        }, 5000);\r\n\r\n        socket.once(\"room-status-response\", (rooms) => {\r\n          clearTimeout(timeout);\r\n          resolve(rooms || []);\r\n        });\r\n      } else {\r\n        reject(new Error(\"Socket not connected\"));\r\n      }\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    user,\r\n    connect,\r\n    disconnect,\r\n    logout,\r\n    joinUser,\r\n    joinRoom,\r\n    leaveRoom,\r\n    sendMessage,\r\n    startTyping,\r\n    stopTyping,\r\n    getRoomStatus,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>{children}</SocketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}