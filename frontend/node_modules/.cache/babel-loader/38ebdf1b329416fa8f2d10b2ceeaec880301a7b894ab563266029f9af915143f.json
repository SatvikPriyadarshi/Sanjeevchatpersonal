{"ast":null,"code":"// Avatar utility functions\n\nexport const avatarOptions = [{\n  id: 'avt1',\n  src: '/images/avt1.jpg',\n  alt: 'Avatar 1'\n}, {\n  id: 'avt2',\n  src: '/images/avt2.jpg',\n  alt: 'Avatar 2'\n}, {\n  id: 'avt3',\n  src: '/images/avt3.jpg',\n  alt: 'Avatar 3'\n}, {\n  id: 'avt4',\n  src: '/images/avt4.jpg',\n  alt: 'Avatar 4'\n}, {\n  id: 'avt5',\n  src: '/images/avt5.jpg',\n  alt: 'Avatar 5'\n}, {\n  id: 'avt6',\n  src: '/images/avt6.jpg',\n  alt: 'Avatar 6'\n}, {\n  id: 'avt7',\n  src: '/images/avt7.jpg',\n  alt: 'Avatar 7'\n}, {\n  id: 'avt8',\n  src: '/images/avt8.jpg',\n  alt: 'Avatar 8'\n}];\n\n/**\r\n * Get avatar image path from avatar ID\r\n * @param {string} avatarId - The avatar ID (e.g., 'avt1', 'avt2', etc.)\r\n * @returns {string} - The path to the avatar image\r\n */\nexport const getAvatarImage = avatarId => {\n  if (!avatarId || typeof avatarId !== 'string') {\n    return '/images/avt1.jpg'; // Default avatar\n  }\n\n  // If it's already a path, return it\n  if (avatarId.includes('/images/')) {\n    return avatarId;\n  }\n\n  // If it's an avatar ID like 'avt1', convert to path\n  if (avatarId.startsWith('avt')) {\n    return `/images/${avatarId}.jpg`;\n  }\n\n  // If it's an emoji or other format, return default\n  return '/images/avt1.jpg';\n};\n\n/**\r\n * Get avatar info by ID\r\n * @param {string} avatarId - The avatar ID\r\n * @returns {object} - Avatar object with id, src, and alt\r\n */\nexport const getAvatarInfo = avatarId => {\n  const avatar = avatarOptions.find(av => av.id === avatarId);\n  return avatar || avatarOptions[0]; // Return first avatar as default\n};","map":{"version":3,"names":["avatarOptions","id","src","alt","getAvatarImage","avatarId","includes","startsWith","getAvatarInfo","avatar","find","av"],"sources":["D:/Sanjeevchatpersonal/frontend/src/utils/avatarUtils.js"],"sourcesContent":["// Avatar utility functions\r\n\r\nexport const avatarOptions = [\r\n  { id: 'avt1', src: '/images/avt1.jpg', alt: 'Avatar 1' },\r\n  { id: 'avt2', src: '/images/avt2.jpg', alt: 'Avatar 2' },\r\n  { id: 'avt3', src: '/images/avt3.jpg', alt: 'Avatar 3' },\r\n  { id: 'avt4', src: '/images/avt4.jpg', alt: 'Avatar 4' },\r\n  { id: 'avt5', src: '/images/avt5.jpg', alt: 'Avatar 5' },\r\n  { id: 'avt6', src: '/images/avt6.jpg', alt: 'Avatar 6' },\r\n  { id: 'avt7', src: '/images/avt7.jpg', alt: 'Avatar 7' },\r\n  { id: 'avt8', src: '/images/avt8.jpg', alt: 'Avatar 8' }\r\n];\r\n\r\n/**\r\n * Get avatar image path from avatar ID\r\n * @param {string} avatarId - The avatar ID (e.g., 'avt1', 'avt2', etc.)\r\n * @returns {string} - The path to the avatar image\r\n */\r\nexport const getAvatarImage = (avatarId) => {\r\n  if (!avatarId || typeof avatarId !== 'string') {\r\n    return '/images/avt1.jpg'; // Default avatar\r\n  }\r\n  \r\n  // If it's already a path, return it\r\n  if (avatarId.includes('/images/')) {\r\n    return avatarId;\r\n  }\r\n  \r\n  // If it's an avatar ID like 'avt1', convert to path\r\n  if (avatarId.startsWith('avt')) {\r\n    return `/images/${avatarId}.jpg`;\r\n  }\r\n  \r\n  // If it's an emoji or other format, return default\r\n  return '/images/avt1.jpg';\r\n};\r\n\r\n/**\r\n * Get avatar info by ID\r\n * @param {string} avatarId - The avatar ID\r\n * @returns {object} - Avatar object with id, src, and alt\r\n */\r\nexport const getAvatarInfo = (avatarId) => {\r\n  const avatar = avatarOptions.find(av => av.id === avatarId);\r\n  return avatar || avatarOptions[0]; // Return first avatar as default\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,aAAa,GAAG,CAC3B;EAAEC,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,EACxD;EAAEF,EAAE,EAAE,MAAM;EAAEC,GAAG,EAAE,kBAAkB;EAAEC,GAAG,EAAE;AAAW,CAAC,CACzD;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,QAAQ,IAAK;EAC1C,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IAC7C,OAAO,kBAAkB,CAAC,CAAC;EAC7B;;EAEA;EACA,IAAIA,QAAQ,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;IACjC,OAAOD,QAAQ;EACjB;;EAEA;EACA,IAAIA,QAAQ,CAACE,UAAU,CAAC,KAAK,CAAC,EAAE;IAC9B,OAAO,WAAWF,QAAQ,MAAM;EAClC;;EAEA;EACA,OAAO,kBAAkB;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAIH,QAAQ,IAAK;EACzC,MAAMI,MAAM,GAAGT,aAAa,CAACU,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACV,EAAE,KAAKI,QAAQ,CAAC;EAC3D,OAAOI,MAAM,IAAIT,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}